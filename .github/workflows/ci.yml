name: Nginx Image CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/nginx
  NGINX_HTTP_PORT: 8080
  NGINX_SSL_PORT: 443

jobs:
  build-and-test:
    name: Build, Test & Security Scan
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    
    env:
      COMPOSE_PROJECT_NAME: nginx-test-${{ github.run_id }}
      NGINX_SERVER_NAME: test.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          config: .hadolint.yaml
          failure-threshold: error

      - name: Build nginx image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          load: true
          tags: nginx-test:latest
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test nginx configuration
        run: |
          docker run --rm --name nginx-config-test \
            -e NGINX_SERVER_NAME=localhost \
            -e NGINX_SSL_ENABLED=false \
            -e NGINX_WORKER_PROCESSES=1 \
            -e NGINX_WORKER_CONNECTIONS=512 \
            nginx-test:latest nginx -t

      - name: Build Django application
        uses: docker/build-push-action@v5
        with:
          context: ./django-app
          file: django-app/Dockerfile
          load: true
          tags: django-app:dev
          platforms: linux/amd64
          cache-from: type=gha,scope=django
          cache-to: type=gha,scope=django,mode=max

      - name: Run security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: nginx-test:latest
          format: table
          exit-code: 1
          severity: HIGH,CRITICAL
          ignore-unfixed: true

      - name: Create test environment
        run: |
          cat > .env << EOF
          NGINX_SERVER_NAME=${{ env.NGINX_SERVER_NAME }}
          DJANGO_SETTINGS_MODULE=django_nginx.settings
          NGINX_HTTP_PORT=80
          NGINX_HTTPS_PORT=443
          CERTBOT_ENABLED=false
          NGINX_SSL_ENABLED=false
          BUILD_TARGET=production
          EOF

      - name: Start services
        run: |
          docker compose -p ${{ env.COMPOSE_PROJECT_NAME }} up -d --wait --wait-timeout 120

      - name: Configure test environment
        run: |
          echo "127.0.0.1 ${{ env.NGINX_SERVER_NAME }}" | sudo tee -a /etc/hosts

      - name: Wait for services
        timeout-minutes: 2
        run: |
          echo "Waiting for nginx to be ready..."
          for i in $(seq 1 6); do
            if curl -k -f --max-time 10 https://${{ env.NGINX_SERVER_NAME }}:${{ env.NGINX_SSL_PORT }}/health/ >/dev/null 2>&1; then
              echo "‚úÖ Nginx is responding"
              exit 0
            fi
            echo "‚è≥ Waiting for nginx... (attempt $i/12)"
            sleep 10
          done
          echo "‚ùå Nginx failed to start"
          exit 1

      - name: Run comprehensive tests
        run: |
          # Test basic connectivity
          echo "üîç Testing basic connectivity..."
          curl -f -k --max-time 10 https://${{ env.NGINX_SERVER_NAME }}:${{ env.NGINX_SSL_PORT }}/health/

          # Test gzip compression
          echo "üîç Testing gzip compression..."
          if curl -H "Accept-Encoding: gzip" -v -k --max-time 10 https://${{ env.NGINX_SERVER_NAME }}:${{ env.NGINX_SSL_PORT }} 2>&1 | grep -i "content-encoding: gzip"; then
            echo "‚úÖ Gzip compression working"
          else
            echo "‚ö†Ô∏è Gzip not enabled"
          fi

          # Test error handling
          echo "üîç Testing error handling..."
          STATUS=$(curl -k -s -o /dev/null -w "%{http_code}" https://${{ env.NGINX_SERVER_NAME }}:${{ env.NGINX_SSL_PORT }}/nonexistent)
          if [ "$STATUS" -eq 404 ]; then
            echo "‚úÖ 404 error handling working"
          else
            echo "‚ö†Ô∏è Unexpected status code: $STATUS"
          fi

      - name: Health check
        run: |
          echo "üîç Checking container health..."
          docker compose -p ${{ env.COMPOSE_PROJECT_NAME }} ps
          
          NGINX_HEALTH=$(docker compose -p ${{ env.COMPOSE_PROJECT_NAME }} ps -q nginx | xargs docker inspect -f '{{.State.Health.Status}}' 2>/dev/null || echo "no-healthcheck")
          echo "Nginx health status: $NGINX_HEALTH"

      - name: Show logs and config on failure
        if: failure()
        run: |
          echo "üîç Collecting container logs..."
          docker compose -p ${{ env.COMPOSE_PROJECT_NAME }} logs --tail=100
          
          echo "üîç Generated nginx.conf:"
          docker run --rm \
            -e NGINX_SERVER_NAME=localhost \
            -e NGINX_SSL_ENABLED=false \
            nginx-test:latest cat /etc/nginx/nginx.conf

      - name: Cleanup
        if: always()
        run: |
          docker compose -p ${{ env.COMPOSE_PROJECT_NAME }} down -v --remove-orphans

  build-and-push:
    name: Build and Push Image
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      image-tags: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Nginx Proxy
            org.opencontainers.image.description=Nginx proxy for Django application

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          provenance: true
          sbom: true

  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Smoke test published image
        run: |
          echo "üîç Testing published image..."
          docker run --rm -d --name nginx-published-test \
            -p 8080:80 \
            -e NGINX_SERVER_NAME=localhost \
            -e NGINX_SSL_ENABLED=false \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          sleep 10
          
          if curl -f --max-time 10 http://localhost:8080/health/; then
            echo "‚úÖ Published image working correctly"
          else
            echo "‚ùå Published image test failed"
            exit 1
          fi
          
          docker stop nginx-published-test