name: Nginx Image CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/nginx

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build nginx image for testing
        run: docker build -t nginx-test:latest .

      - name: Test generated nginx config
        id: test_config
        run: |
          docker run --rm \
            -e NGINX_SERVER_NAME=localhost \
            -e NGINX_SSL_ENABLED=false \
            -e NGINX_WORKER_PROCESSES=1 \
            -e NGINX_WORKER_CONNECTIONS=512 \
            nginx-test:latest nginx -t
        continue-on-error: true

      - name: Show generated config on failure
        if: steps.test_config.outcome == 'failure'
        run: |
          echo "
          docker run --rm \
            -e NGINX_SERVER_NAME=localhost \
            -e NGINX_SSL_ENABLED=false \
            -e NGINX_WORKER_PROCESSES=1 \
            -e NGINX_WORKER_CONNECTIONS=512 \
            nginx-test:latest cat /etc/nginx/nginx.conf
          "


          exit 1

  build-django:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build django image
        run: docker build -t django-app:dev -f django-app/Dockerfile ./django-app

  test-nginx-image:
    runs-on: ubuntu-latest
    needs: [lint, build-django]
    
    env:
      CI_NGINX_SERVER_NAME: test.example.com
      COMPOSE_PROJECT_NAME: nginx-test-${{ github.run_id }}
      
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create test environment file
        run: |
          cat > .env << EOF
          CI_NGINX_SERVER_NAME=${{ env.CI_NGINX_SERVER_NAME }}
          DJANGO_SETTINGS_MODULE=django-app.settings
          CERTBOT_ENABLED=false
          NGINX_SSL_ENABLED=false
          BUILD_TARGET=production
          DJANGO_APP_DIR=django_app
          DJANGO_APP_NAME=django_app
          EOF

      - name: Start services
        run: |
          docker compose -p ${{ env.COMPOSE_PROJECT_NAME }} up -d --wait
          
      - name: Add test domain to hosts
        run: |
          echo "127.0.0.1 ${{ env.CI_NGINX_SERVER_NAME }}" | sudo tee -a /etc/hosts

      - name: Wait for services to be ready
        timeout-minutes: 3
        run: |
          echo "Waiting for nginx to be healthy..."
          for i in $(seq 1 18); do
            if curl -f http://${{ env.CI_NGINX_SERVER_NAME }}/health/ >/dev/null 2>&1; then
              echo "‚úÖ Nginx is responding"
              break
            fi
            echo "‚è≥ Waiting for nginx... (attempt $i/18)"
            sleep 10
          done

      - name: Test nginx configuration
        run: |
          # Test basic connectivity
          echo "üîç Testing basic connectivity..."
          curl -f http://${{ env.CI_NGINX_SERVER_NAME }}/health/ || exit 1
          
          # Test Django admin static files
          echo "üîç Testing static file serving..."
          curl -f http://${{ env.CI_NGINX_SERVER_NAME }}/static/admin/css/base.css || exit 1
          
          # Test gzip compression
          echo "üîç Testing gzip compression..."
          curl -H "Accept-Encoding: gzip" -v http://${{ env.CI_NGINX_SERVER_NAME }} 2>&1 | grep -i "content-encoding: gzip" || echo "‚ö†Ô∏è Gzip not enabled"
          
          # Test Django is accessible
          echo "üîç Testing Django accessibility..."
          curl -f http://${{ env.CI_NGINX_SERVER_NAME }} | grep -i "django" || echo "‚ö†Ô∏è Django default page not found"

      - name: Test nginx performance
        run: |
          echo "üîç Running basic performance test..."
          docker run --rm --network container:$(docker compose -p ${{ env.COMPOSE_PROJECT_NAME }} ps -q nginx) \
            williamyeh/wrk -t2 -c10 -d10s http://${{ env.CI_NGINX_SERVER_NAME }}/health/

      - name: Check container health
        run: |
          echo "üîç Checking container health..."
          docker compose -p ${{ env.COMPOSE_PROJECT_NAME }} ps
          
          # Check if nginx is actually healthy
          NGINX_HEALTH=$(docker compose -p ${{ env.COMPOSE_PROJECT_NAME }} ps -q nginx | xargs docker inspect -f '{{.State.Health.Status}}' 2>/dev/null || echo "no-healthcheck")
          echo "Nginx health status: $NGINX_HEALTH"

      - name: Show logs on failure
        if: failure()
        run: |
          echo "üîç Showing container logs..."
          docker compose -p ${{ env.COMPOSE_PROJECT_NAME }} logs --tail=50

      - name: Cleanup
        if: always()
        run: |
          docker compose -p ${{ env.COMPOSE_PROJECT_NAME }} down -v --remove-orphans

  security-scan:
    runs-on: ubuntu-latest
    needs: test-nginx-image
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build nginx image for scanning
        run: |
          docker build -t nginx-test:latest -f Dockerfile .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: nginx-test:latest
          format: table
          exit-code: 1
          severity: HIGH,CRITICAL

      - name: Run Trivy for SARIF report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: nginx-test:latest
          format: sarif
          output: trivy-results.sarif

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: trivy-results.sarif

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test-nginx-image, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push nginx image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  test-published-image:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Test published image
        run: |
          # Pull and test the published image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Quick smoke test
          docker run --rm -d --name nginx-test \
            -p 8080:80 \
            -e NGINX_SERVER_NAME=localhost \
            -e NGINX_SSL_ENABLED=false \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Wait a bit for startup
          sleep 5
          
          # Test if it responds
          curl -f http://localhost:8080/health/ || exit 1
          
          # Cleanup
          docker stop nginx-test